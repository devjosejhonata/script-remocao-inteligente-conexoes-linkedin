
// Fun√ß√£o para normalizar o texto (remover acentos, espa√ßos extras e deixar min√∫sculo)
function normalizeText(text) {
    return text
        .normalize("NFD") // Separa caracteres acentuados (ex: "√©" vira "e" + acento)
        .replace(/[\u0300-\u036f]/g, "") // Remove os acentos
        .toLowerCase() // Converte para min√∫sculas
        .trim(); // Remove espa√ßos em branco nas extremidades
}

// Verifica se pelo menos uma palavra-chave de manuten√ß√£o est√° presente no t√≠tulo
function shouldKeepConnection(title, keywordsToKeep) {
    let normalizedTitle = normalizeText(title); // Normaliza o t√≠tulo do usu√°rio
    let regex = new RegExp(`\\b(${keywordsToKeep.map(normalizeText).join("|")})\\b`, "i"); // Cria uma express√£o regular com as palavras-chave
    return regex.test(normalizedTitle); // Retorna true se encontrar alguma palavra-chave no t√≠tulo
}

// Fun√ß√£o principal que executa a l√≥gica de remo√ß√£o de conex√µes com base nas palavras-chave
async function removeConnectionsByKeywords(keywordsToRemove, keywordsToKeep, maxRemovals = 50) {
    console.log("üîç Buscando conex√µes para remover...");
    
    // Captura todos os cart√µes de conex√£o na p√°gina do LinkedIn
    let connections = document.querySelectorAll('.mn-connection-card');
    console.log(`üîç Encontradas ${connections.length} conex√µes na p√°gina.`);

    let candidatesForRemoval = []; // Armazena conex√µes candidatas √† remo√ß√£o

    // Itera sobre todas as conex√µes vis√≠veis na p√°gina
    for (let connection of connections) {
        // Coleta elementos de nome, cargo e tempo de conex√£o
        let nameElement = connection.querySelector('.mn-connection-card__name');
        let titleElement = connection.querySelector('.mn-connection-card__occupation');
        let timeElement = connection.querySelector('.time-badge');

        // Extrai os textos, com fallback caso algum elemento n√£o seja encontrado
        let name = nameElement ? nameElement.innerText.trim() : "Nome n√£o encontrado";
        let title = titleElement ? titleElement.innerText.trim() : "Cargo n√£o encontrado";
        let timeConnected = timeElement ? timeElement.innerText.trim() : "Tempo de conex√£o n√£o encontrado";

        let normalizedTitle = normalizeText(title); // Normaliza o t√≠tulo para compara√ß√£o

        // Se contiver palavra-chave de manuten√ß√£o, pula essa conex√£o
        if (shouldKeepConnection(title, keywordsToKeep)) {
            continue;
        }

        // Se a lista de remo√ß√£o estiver vazia, considera todas que n√£o est√£o na lista de manuten√ß√£o
        // ou se o t√≠tulo contiver palavras a serem removidas
        if (keywordsToRemove.length === 0 || keywordsToRemove.some(keyword => normalizedTitle.includes(normalizeText(keyword)))) {
            // Adiciona aos candidatos para remo√ß√£o
            candidatesForRemoval.push({ connection, name, title, timeConnected });
        }
    }

    console.log(`üìä O n√∫mero de conex√µes encontradas para remo√ß√£o √©: ${candidatesForRemoval.length}`);

    // Se nenhuma conex√£o for marcada para remo√ß√£o, finaliza
    if (candidatesForRemoval.length === 0) {
        console.log("‚úÖ Nenhuma conex√£o encontrada para remo√ß√£o.");
        return;
    }

    // Limita ao n√∫mero m√°ximo de remo√ß√µes definido
    candidatesForRemoval = candidatesForRemoval.slice(0, maxRemovals);

    // Exibe a lista de conex√µes candidatas para revis√£o do usu√°rio
    console.log("\n‚ö†Ô∏è As seguintes conex√µes ser√£o listadas para remo√ß√£o:");
    candidatesForRemoval.forEach((user, index) => {
        console.log(`${(index + 1).toString().padStart(2, '0')}. ${user.name}\nCargo do usu√°rio:\n${user.title}\n${user.timeConnected}\n`);
    });

    // Solicita input do usu√°rio para confirmar remo√ß√£o
    let input = prompt("‚ùó Digite os n√∫meros das conex√µes que deseja remover, separados por v√≠rgula, ou digite 'todas' para remover todas: ");
    if (!input) {
        console.log("‚ùå Nenhuma op√ß√£o escolhida. Remo√ß√£o cancelada.");
        return;
    }

    // Interpreta a entrada do usu√°rio
    let selectedIndices = input.trim().toLowerCase() === "todas" 
        ? Array.from({ length: candidatesForRemoval.length }, (_, i) => i) // Seleciona todos
        : input.split(',').map(num => parseInt(num.trim(), 10) - 1).filter(num => num >= 0 && num < candidatesForRemoval.length); // Seleciona √≠ndices v√°lidos

    if (selectedIndices.length === 0) {
        console.log("‚ùå Nenhum n√∫mero v√°lido informado. Remo√ß√£o cancelada.");
        return;
    }

    console.log("\n‚è≥ Iniciando remo√ß√£o...");
    let removedCount = 0; // Contador de remo√ß√µes bem-sucedidas

    // Executa a remo√ß√£o para cada conex√£o selecionada
    for (let index of selectedIndices) {
        let user = candidatesForRemoval[index];
        let { connection, name, title, timeConnected } = user;

        // Abre o menu de op√ß√µes da conex√£o
        let menuButton = connection.querySelector('.artdeco-dropdown__trigger');
        if (!menuButton) {
            console.log(`‚ö†Ô∏è Bot√£o de op√ß√µes n√£o encontrado para ${name}, pulando...`);
            continue;
        }

        menuButton.click();
        await new Promise(resolve => setTimeout(resolve, 2000)); // Aguarda o menu abrir

        // Procura a op√ß√£o "Remover conex√£o"
        let removeButton = [...document.querySelectorAll('.artdeco-dropdown__content span')].find(span => span.innerText.includes("Remover conex√£o"));
        if (!removeButton) {
            console.log(`‚ö†Ô∏è Bot√£o 'Remover conex√£o' n√£o encontrado para ${name}, pulando...`);
            continue;
        }

        removeButton.click();
        await new Promise(resolve => setTimeout(resolve, 2000)); // Aguarda o modal de confirma√ß√£o abrir

        //  Confirma a remo√ß√£o
        let confirmButton = [...document.querySelectorAll('button')].find(btn => btn.innerText.includes("Remover"));
        if (!confirmButton) {
            console.log(`‚ö†Ô∏è Bot√£o de confirma√ß√£o n√£o encontrado para ${name}, pulando...`);
            continue;
        }

        confirmButton.click();
        removedCount++; // Incrementa contador
        console.log(`‚úÖ Conex√£o removida com sucesso! (${removedCount}/${selectedIndices.length})\n${name}\nCargo do usu√°rio:\n${title}\n${timeConnected}\n`);
        await new Promise(resolve => setTimeout(resolve, 3000)); // Aguarda antes de continuar para evitar sobrecarga
    }

    // Exibe resumo ao final
    console.log(`üéØ Processo finalizado! Total removido: ${removedCount}`);
}

//  Palavras-chave de remo√ß√£o (vazio = remover todas que n√£o est√£o na lista de manuten√ß√£o)
const keywordsToRemove = [];

//  Palavras-chave que indicam conex√µes que devem ser mantidas
const keywordsToKeep = [
    "gestor", "diretor"
];

// Chamada da fun√ß√£o principal com os par√¢metros definidos
removeConnectionsByKeywords(keywordsToRemove, keywordsToKeep, 50);
